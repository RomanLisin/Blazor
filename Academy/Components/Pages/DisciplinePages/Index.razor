@page "/disciplines"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Academy.Models
@using Academy.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Academy.Data.AcademyContext> DbFactory

@rendermode InteractiveServer

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<div>
    <form action="/disciplines" data-enhance data-permanent>
        <input type="search" name="DisciplineFilter" value="@DisciplineFilter" />
        <input type="submit" value="Search" />
    </form>
</div>

<div>
    <label for=’items-per-page”>Items per page</label>
    <select name=”items-per-page @bind="pagination.ItemsPerPage">
        <option>3</option>
        <option>5</option>
        <option>8</option>
    </select>
</div>

<p>
    <a href="disciplines/create">Create New</a>
</p>

<QuickGrid Class="table" Items="FilteredDisciplines" Pagination="pagination">
    <PropertyColumn Property="discipline => discipline.discipline_id" Sortable="true"/>
    <PropertyColumn Property="discipline => discipline.discipline_name" Sortable="true"/>
    <PropertyColumn Property="discipline => discipline.number_of_lessons" Sortable="true"/>
    <TemplateColumn Context="discipline">
        <a href="@($"disciplines/edit?discipline_id={discipline.discipline_id}")">Edit</a> |
        <a href="@($"disciplines/details?discipline_id={discipline.discipline_id}")">Details</a> |
        <a href="@($"disciplines/delete?discipline_id={discipline.discipline_id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

<Paginator State="pagination" />

@code {
    private AcademyContext context = default!;
    [SupplyParameterFromQuery]
    public string? DisciplineFilter { get; set; } = "";

    IQueryable<Discipline> FilteredDisciplines =>
       context.Disciplines.Where(m => m.discipline_name.Contains(DisciplineFilter ?? string.Empty));

    PaginationState pagination = new PaginationState { ItemsPerPage = 3 };

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
