@page "/teachers/edit"
@using Microsoft.EntityFrameworkCore
@using Academy.Models
@inject IDbContextFactory<Academy.Data.AcademyContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Teachers</h2>
<hr />
@if (Teachers is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Teachers" OnValidSubmit="UpdateTeachers" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Teachers.stud_id" value="@Teachers.teacher_id" />
                <div class="mb-3">
                    <label for="teacher_id" class="form-label">teacher_id:</label>
                    <InputNumber id="teacher_id" @bind-Value="Teachers.teacher_id" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Teachers.teacher_id" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="last_name" class="form-label">last_name:</label>
                    <InputText id="last_name" @bind-Value="Teachers.last_name" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Teachers.last_name" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="first_name" class="form-label">first_name:</label>
                    <InputText id="first_name" @bind-Value="Teachers.first_name" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Teachers.first_name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="middle_name" class="form-label">middle_name:</label>
                    <InputText id="middle_name" @bind-Value="Teachers.middle_name" class="form-control" />
                    <ValidationMessage For="() => Teachers.middle_name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="birth_date" class="form-label">birth_date:</label>
                    <InputDate id="birth_date" @bind-Value="Teachers.birth_date" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Teachers.birth_date" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">email:</label>
                    <InputText id="email" @bind-Value="Teachers.email" class="form-control" />
                    <ValidationMessage For="() => Teachers.email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="phone" class="form-label">phone:</label>
                    <InputText id="phone" @bind-Value="Teachers.phone" class="form-control" />
                    <ValidationMessage For="() => Teachers.phone" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="photo" class="form-label">photo:</label>
                    <InputFile id="photo" @bind-Value="Teachers.photo" class="form-control" />
                    <ValidationMessage For="() => Teachers.photo" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="work_since" class="form-label">work_since:</label>
                    <InputDate id="work_since" @bind-Value="Teachers.work_since" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Teachers.work_since" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="rate" class="form-label">rate:</label>
                    <InputNumber id="rate" @bind-Value="Teachers.rate" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Teachers.rate" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/teachers">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private short stud_id { get; set; }

    [SupplyParameterFromForm]
    private Teachers? Teachers { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Teachers ??= await context.Teachers.FirstOrDefaultAsync(m => m.teacher_id == stud_id);

        if (Teachers is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateTeachers()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Teachers!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!TeachersExists(Teachers!.teacher_id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/teachers");
    }

    private bool TeachersExists(short stud_id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Teachers.Any(e => e.teacher_id == stud_id);
    }
}
