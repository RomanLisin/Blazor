@page "/groups/delete"
@using Microsoft.EntityFrameworkCore
@using Academy.Models
@inject IDbContextFactory<Academy.Data.AcademyContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Groups</h2>
    <hr />
    @if (groups is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">group_name</dt>
            <dd class="col-sm-10">@groups.group_name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">direction</dt>
            <dd class="col-sm-10">@groups.direction</dd>
        </dl>
        <EditForm method="post" Model="groups" OnValidSubmit="DeleteGroups" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(groups is null)">Delete</button> |
            <a href="/groups">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Groups? groups;

    [SupplyParameterFromQuery]
    private short group_id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        groups = await context.Groups.FirstOrDefaultAsync(m => m.group_id == group_id);

        if (groups is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteGroups()
    {
        using var context = DbFactory.CreateDbContext();
        context.Groups.Remove(groups!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/groups");
    }
}
