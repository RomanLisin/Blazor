@page "/directions/create"
@using Microsoft.EntityFrameworkCore
@using Academy.Models
@inject IDbContextFactory<Academy.Data.AcademyContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Directions</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Directions" OnValidSubmit="AddDirections" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="direction_id" class="form-label">direction_id:</label> 
                <InputNumber id="direction_id" @bind-Value="Directions.direction_name" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Directions.direction_id" class="text-danger" /> 
            </div>  
            
            <div class="mb-3">
                <label for="direction_name" class="form-label">direction_name:</label> 
                <InputText id="direction_name" @bind-Value="Directions.direction_name" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Directions.direction_name" class="text-danger" /> 
            </div>  
            
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/directions">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Directions Directions { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddDirections()
    {
        using var context = DbFactory.CreateDbContext();
        context.Directions.Add(Directions);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/directions");
    }
}
